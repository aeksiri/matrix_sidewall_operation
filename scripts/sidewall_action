#! /usr/bin/env python

import rospy
import actionlib
# from matrix_msgs.msg import RobotMode, WallFollowingAction, WallFollowingGoal, WallFollowingFeedback, WallFollowingResult
from matrix_msgs.msg import RobotMode, SideWallAction, SideWallGoal, SideWallFeedback, SideWallResult
from sensor_msgs.msg import LaserScan
from geometry_msgs.msg import Twist
from nav_msgs.msg import Odometry
from rospy.exceptions import ROSInterruptException
from enum import Enum

import math
import numpy as np
import random
import sys
import time

class Sequence(Enum):
    INIT=0,
    DATA_CHECKING=1,
    INIT_PARAM=2,
    SIDEWALL_TRACKING=3,
    FINISH=4,
    PAUSE=5,
    ERROR=6


class ActionServer():

    def __init__(self):
        self.sub_LaserScan = rospy.Subscriber('/scan', LaserScan, self.scan_callback)
        self.sub_Odom = rospy.Subscriber('/odom', Odometry, self.odom_callback)
        self.sub_RobotMode = rospy.Subscriber('/matrix_mode_controller/mode', RobotMode, self.mode_callback)   
        self.pub_cmd_vel = rospy.Publisher('/cmd_vel', Twist, queue_size=1)


        self.glob_linear_x_vel = 0.0
        self.glob_travel_distance = 0.0
        self.glob_prev_travel_distance = 0.0
        self.timestmp_begin = 0.0
        self.timestmp_old = 0.0
        self.total_time = 0.0
        self.timer_counter = 0.0
        self.current_robotmode = 0

        self.msg = LaserScan()

        self.a_server = actionlib.SimpleActionServer(
            "matrix_sidewalk_operation", SideWallAction, execute_cb=self.execute_cb, auto_start=False)
        self.a_server.start()

    
    def mode_callback(self, msg):
        self.current_robotmode = msg.robot_mode

    
    def odom_callback(self, msg):
        dt = 0.0333333333
        current_linear_x_vel = msg.twist.twist.linear.x
        current_angular_z_vel = msg.twist.twist.angular.z

        current_distance = current_linear_x_vel*dt
        #print(current_distance)
        self.glob_travel_distance = self.glob_travel_distance + current_distance
        #print(self.glob_travel_distance)
        #self.glob_prev_travel_distance = self.glob_linear_x_vel
        #print(".")
    
    def scan_callback(self, raw_msg):
        self.msg = raw_msg
        # print("scan_callback")
    
    def update_command_vel(self, linear_vel, angular_vel):
        msg = Twist()

        max_linear_vel = 0.7
        max_angular_vel = max_linear_vel * 2

        if(linear_vel >= max_linear_vel):
            linear_vel = max_linear_vel
        elif(linear_vel <= -max_linear_vel):
            linear_vel = -max_linear_vel
        else:
            pass

        if(angular_vel >= max_angular_vel):
            angular_vel = max_angular_vel
        elif(angular_vel <= -max_angular_vel):
            angular_vel = -max_angular_vel
        else:
            pass

        msg.linear.x = linear_vel
        msg.angular.z = angular_vel
        self.pub_cmd_vel.publish(msg)

    def execute_cb(self, goal):

        success = True
        finish = False

        feedback = SideWallFeedback()
        result = SideWallResult()
        rate = rospy.Rate(10)

        sequence = Sequence.INIT.value
        text=""
        timeout= 0
        total_time = 0

        task_result = SideWallResult.SUCCESS


        period_state = 0
        period_text = ""
        period_timeout_coutdown = 0
        setTimeOut = 0

        self.glob_travel_distance = 0.0
        


        while not finish:
            # print(text)
            if self.a_server.is_preempt_requested():
                self.update_command_vel(0, 0)
                rospy.logwarn("Preemting !!!!!")
                
                success = False
                finish = True

                result.result = SideWallResult.PREEMTING
                result.sequence = feedback.sequence
                result.text = "preemting"

                result.travel_dist = feedback.current_travel_dist
                result.total_time = feedback.total_time

                self.a_server.set_preempted(result)


                break

            if sequence == Sequence.INIT.value:
                text = "INIT"
                # print("[seq]--> current order target process: " + str(i))
                # print("x: " + str(goal.target[i].pose.position.x))
                # print("y: " + str(goal.target[i].pose.position.y))
                # print("heading w : " + str(goal.target[i].pose.orientation.w))
                sequence = Sequence.DATA_CHECKING.value
                # break
            
            elif sequence == Sequence.DATA_CHECKING.value:
                text="DATA_CHECKING"
                # if len(self.msg.ranges) == goal.num_lidar_data:
                #     sequence = Sequence.INIT_PARAM.value
                # else:
                #     text = text + "Data missmatch"
                #     task_result = WallFollowingResult.NUM_DATA_MISSMATCH
                #     sequence = Sequence.ERROR.value
                sequence = Sequence.INIT_PARAM.value
                # break

            elif sequence == Sequence.INIT_PARAM.value:
                text="INIT_PARAM"
                self.timestmp_begin = rospy.get_rostime().secs
                setTimeOut = rospy.get_rostime().secs + goal.timeout
                sequence = Sequence.SIDEWALL_TRACKING.value
                # break

            elif sequence == Sequence.SIDEWALL_TRACKING.value:
                text = "SIDEWALL_TRACKING"

                rightside_wall = goal.right_wall
                leftside_wall = goal.left_wall

                kp = 3.0

                if ((leftside_wall == True) and (rightside_wall == False)):
                    # --------------------------------------------------------------------------------------#
                    #
                    #
                    #                           LEFT - SideWall Following Control Begin
                    #
                    #---------------------------------------------------------------------------------------#
                    # lidar_data = rospy.wait_for_message('/scan_f_raw', LaserScan, timeout=1)
                    # self.msg = lidar_data
                    # print(len(self.msg.ranges))
                    left_front = self.msg.ranges[45]
                    left_rear = self.msg.ranges[135]

                    stop_max_range = 3.0
                    stop_min_range = 0.6

                    stop_zone_left = np.array(self.msg.ranges[0:45])
                    # print(len(stop_zone_left))
                    # print(stop_zone_left)

                    stop_zone_left_clipped = np.clip(stop_zone_left,stop_min_range,stop_max_range)
                    #print(len(stop_zone_left_clipped))
                    #print(stop_zone_left_clipped)
                    #print(np.mean(stop_zone_left_clipped))
                    
                    stop_zone_right = np.array(self.msg.ranges[315:358])
                    # print(len(stop_zone_right))
                    # print(stop_zone_right)

                    stop_zone_right_clipped = np.clip(stop_zone_right,stop_min_range,stop_max_range)
                    # print(len(stop_zone_right_clipped))
                    # print(np.mean(stop_zone_right_clipped))

                    # stop_zone_clipped = (stop_zone_left_clipped + stop_zone_right_clipped)
                    # stop_zone_clipped = np.concatenate(stop_zone_left_clipped, stop_zone_right_clipped)
                    stop_zone_clipped = np.hstack((stop_zone_left_clipped, stop_zone_right_clipped))
                    #print(len(stop_zone_clipped))
                    #print(stop_zone_clipped)
                    stop_zone_avr = np.mean(stop_zone_clipped)
                    #print(stop_zone_avr)

                    vel_max_scale = 1.0
                    vel_rate = vel_max_scale / (stop_max_range - stop_min_range)
                    #print(vel_rate)
                    vel_scale = stop_zone_avr * vel_rate
                    #print(vel_scale)

                    # stop_zone_avr = np.mean(stop_zone)
                    # print(stop_zone_avr)
                    
                    #print("---------------------")



                    error = (left_front) - (left_rear)
                    # left = msg.ranges[2251]
                    # right = msg.ranges[750]
                    # left = msg.ranges[2251]
                    # right = msg.ranges[375]
                    # left = msg.ranges[1125]
                    # error = left - right
                    # kp = 0.6

                    # print(error)

                    lin_vel_max = goal.lin_vel_max
                    ang_vel_max = lin_vel_max * 2
                    ang_vel = kp*error
                    
                    
                    distance_to_travel = goal.travel_dist
                    obstacle_stop_distance = goal.obstacle_stop_dist

                    # distance_to_travel = 60.10 # [m]
                    # obstacle_stop_distance = 0.7 # [m]

                    if vel_scale < obstacle_stop_distance:
                        self.update_command_vel(0, 0)
                        vel_scale = 0
                        print('!!! STOP !!!')
                    else:                      
                        vel_scale = vel_scale
                        if self.glob_travel_distance >= distance_to_travel:
                            self.update_command_vel(0, 0)
                            print('!!! Left Wall Tracking - Arrived !!!', self.glob_travel_distance)
                            text = "Left Wall Tracking - Arrived"
                            task_result = SideWallResult.SUCCESS
                            success = True
                            sequence = Sequence.FINISH.value
                        else:
                            print('!!! Left Wall Tracking !!!', self.glob_travel_distance)
                            self.update_command_vel(vel_scale*lin_vel_max, vel_scale*ang_vel)

                    #------------ TIMEOUT CHECKING -----------#
                    self.timer_counter = rospy.get_rostime().secs - self.timestmp_begin
                    total_time = self.timer_counter
                    
                    if goal.timeout != SideWallGoal.IGNORE_PARAMETER:
                        timeout = setTimeOut - rospy.get_rostime().secs
                        rospy.loginfo("[matrix_sidewall_operation]:Check timeout countdown " + str(timeout))
                        if rospy.get_rostime().secs > setTimeOut:
                            self.update_command_vel(0, 0)
                            text = text + "Timeout"
                            task_result = SideWallResult.TIME_OUT
                            sequence = Sequence.ERROR.value
                            rospy.logerr(text)
                        else:
                            pass
                        
                    else:
                        timeout = SideWallGoal.IGNORE_PARAMETER
                        # rospy.loginfo("no timeout")
                    
                    # --------------------------------------------------------------------------------------#
                    #
                    #
                    #                           LEFT - SideWall Following Control END
                    #
                    #---------------------------------------------------------------------------------------#

                elif ((rightside_wall == True) and (leftside_wall == False)):
                    # --------------------------------------------------------------------------------------#
                    #
                    #
                    #                           RIGHT - SideWall Following Control Begin
                    #
                    #---------------------------------------------------------------------------------------#
                    # lidar_data = rospy.wait_for_message('/scan_f_raw', LaserScan, timeout=1)
                    # self.msg = lidar_data
                    right_rear = self.msg.ranges[225]
                    right_front = self.msg.ranges[315]

                    stop_max_range = 3.0
                    stop_min_range = 0.6

                    stop_zone_left = np.array(self.msg.ranges[0:45])
                    # print(len(stop_zone_left))
                    # print(stop_zone_left)

                    stop_zone_left_clipped = np.clip(stop_zone_left,stop_min_range,stop_max_range)
                    #print(len(stop_zone_left_clipped))
                    #print(stop_zone_left_clipped)
                    #print(np.mean(stop_zone_left_clipped))
                    
                    stop_zone_right = np.array(self.msg.ranges[315:358])
                    # print(len(stop_zone_right))
                    # print(stop_zone_right)

                    stop_zone_right_clipped = np.clip(stop_zone_right,stop_min_range,stop_max_range)
                    #print(len(stop_zone_right_clipped))
                    # print(np.mean(stop_zone_right_clipped))

                    # stop_zone_clipped = (stop_zone_left_clipped + stop_zone_right_clipped)
                    # stop_zone_clipped = np.concatenate(stop_zone_left_clipped, stop_zone_right_clipped)
                    stop_zone_clipped = np.hstack((stop_zone_left_clipped, stop_zone_right_clipped))
                    #print(len(stop_zone_clipped))
                    #print(stop_zone_clipped)
                    stop_zone_avr = np.mean(stop_zone_clipped)
                    #print(stop_zone_avr)

                    vel_max_scale = 1.0
                    vel_rate = vel_max_scale / (stop_max_range - stop_min_range)
                    #print(vel_rate)
                    vel_scale = stop_zone_avr * vel_rate
                    #print(vel_scale)

                    # stop_zone_avr = np.mean(stop_zone)
                    # print(stop_zone_avr)
                    
                    #print("---------------------")

                    # error = (left+left_offset) - (right+right_offset)
                    error = (right_rear) - (right_front)
                    # left = msg.ranges[2251]
                    # right = msg.ranges[750]
                    # left = msg.ranges[2251]
                    # right = msg.ranges[375]
                    # left = msg.ranges[1125]
                    # error = left - right
                    # kp = 0.6
 
                    # print(error)

                    lin_vel_max = goal.lin_vel_max
                    ang_vel_max = lin_vel_max * 2
                    ang_vel = kp*error
                    
                    distance_to_travel = goal.travel_dist
                    obstacle_stop_distance = goal.obstacle_stop_dist

                    # distance_to_travel = 60.10 # [m]
                    # obstacle_stop_distance = 0.7 # [m]

                    if vel_scale < obstacle_stop_distance:
                        self.update_command_vel(0, 0)
                        vel_scale = 0
                        print('!!! STOP !!!')
                    else:
                        vel_scale = vel_scale
                        if self.glob_travel_distance >= distance_to_travel:
                            self.update_command_vel(0, 0)
                            print('!!! Right Wall Tracking - Arrived !!!', self.glob_travel_distance)
                            text = "Right Wall Tracking - Arrived"
                            task_result = SideWallResult.SUCCESS
                            success = True
                            sequence = Sequence.FINISH.value
                        else:
                            print('!!! Right Wall Tracking !!!', self.glob_travel_distance)
                            self.update_command_vel(vel_scale*lin_vel_max, vel_scale*ang_vel)


                    #------------ TIMEOUT CHECKING -----------#
                    self.timer_counter = rospy.get_rostime().secs - self.timestmp_begin
                    total_time = self.timer_counter
                    
                    if goal.timeout != SideWallGoal.IGNORE_PARAMETER:
                        timeout = setTimeOut - rospy.get_rostime().secs
                        rospy.loginfo("[matrix_sidewall_operation]:Check timeout countdown " + str(timeout))
                        if rospy.get_rostime().secs > setTimeOut:
                            self.update_command_vel(0, 0)
                            text = text + "Timeout"
                            task_result = SideWallResult.TIME_OUT
                            sequence = Sequence.ERROR.value
                            rospy.logerr(text)
                        else:
                            pass
                    else:
                        timeout = SideWallGoal.IGNORE_PARAMETER
                        # rospy.loginfo("no timeout")
                    
                    # --------------------------------------------------------------------------------------#
                    #
                    #
                    #                           RIGHT - SideWall Following Control END
                    #
                    #---------------------------------------------------------------------------------------#
                else:
                    self.update_command_vel(0, 0)
                    text = "ERROR - please choose LEFT-wall or RIGHT-wall"
                    task_result = SideWallResult.PREEMTING
                    success = True
                    sequence = Sequence.FINISH.value
                    rospy.logerr(text)

            elif sequence == Sequence.ERROR.value:
                self.update_command_vel(0, 0)
                success = True
                sequence = Sequence.FINISH.value
            
            elif sequence == Sequence.PAUSE.value:
                if self.current_robotmode != RobotMode.PAUSE:
                    self.update_command_vel(0, 0)
                    sequence = period_state
                    text = period_text
                    period_text = ""
                    setTimeOut = rospy.get_rostime().secs + period_timeout_coutdown
                else:
                    pass
                # break

            elif sequence == Sequence.FINISH.value:
                self.update_command_vel(0, 0)
                text = "FINISH"
                finish = True
                success = True
                # break
                
            else:
                self.update_command_vel(0, 0)
                break
            
            #//**********************************************************//
            #//                                                          //
            #//                      check pause state                   //
            #//                                                          //
            #//**********************************************************//
            if self.current_robotmode == RobotMode.PAUSE and sequence != Sequence.PAUSE.value:
                self.update_command_vel(0, 0)
                period_state = sequence
                period_text = text
                sequence = Sequence.PAUSE.value
                period_timeout_coutdown = setTimeOut - rospy.get_rostime().secs
                text = period_text + "  [Pausing_mode]"
            else:
                pass
            
            
            # feedback.sequence = sequence
            feedback.text = text
            feedback.current_travel_dist = self.glob_travel_distance
            feedback.total_time = total_time
            feedback.timeout = timeout
            self.a_server.publish_feedback(feedback)
            print("")

            rate.sleep()

        print("")
        print("")
        print("")

        result.result = task_result
        result.sequence = feedback.sequence
        result.text = feedback.text

        result.travel_dist = feedback.current_travel_dist
        result.total_time = feedback.total_time

        print(success)
        if success == True:
            self.a_server.set_succeeded(result)
        else:
            pass

if __name__ == "__main__":
    rospy.init_node("action_server")
    s = ActionServer()
    rospy.spin()
